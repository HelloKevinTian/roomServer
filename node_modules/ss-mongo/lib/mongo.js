var mongo = require('mongoskin');
var logger = require('ss-logger').getLogger(__filename);
var uuid = require('uuid');
var fs = require('fs');

var _db = {};
var uidTable = 'GlobleGuid';

/**
 * 获取db对象.
 *
 * @return {db Object}
 */
function getDB(table) {
    if (!table) {
        table = 'game';
    }

    return _db[table];
};

/**
 * 配置mongodb模块.
 *
 * @param  {String|Object} config 配置文件路径或者配置文件对象
 * @return {void}
 */
function configure(config) {
    if (typeof config === 'string') {
        config = JSON.parse(fs.readFileSync(config, "utf8"));
    };

    var dbOptions = {
        safe: true
    };

    for (var i in config) {
        var db = config[i];
        if (db.host == null || db.port == null || db.db == null) {
            continue;
        }

        var dbName = ('mongodb://' + db.host + ':' + db.port + '/' + db.db + '?auto_reconnect=true');
        _db[i] = mongo.db(dbName, dbOptions);
        if (_db[i] == null) {
            logger.error('create db %s fail');
        }
    }
};

/** 
 * 创建uuid
 *
 * @return {String} uuid
 */
function getUuid() {
    var str = uuid();
    str = str.replace(/-/g, '');
    return str;
}

/** 
 * 检测数据是否存在
 *
 * @param  {String} key 查询字段key
 * @param  {String|Number} val 查询字段
 * @param  {String} table 数据库表明
 * @param  {Function} callback 回调函数
 * @return {void}
 */
function checkTableValue(key, val, table, callback) {
    if (!_db) {
        logger.error('[checkTableValue] db is null');
        callback(true);
        return;
    };
    /* 配置查询参数 */
    var args = {};
    args[key] = val;
    /* 查询数据库 */
    _db.collection(table).findOne(args, function(error, result) {
        if (error) {
            logger.error(error);
            callback(true);
        } else {
            callback(false, result);
        }
    });
};


/** 
 * 获取本地唯一编号
 *
 * @param  {String|Number} guid 全局唯一编号
 * @param  {String} table 数据库表明
 * @param  {Function} callback 回调函数
 * @return {void}
 */
function getUID(guid, callback) {
    if (!_db) {
        logger.error('[getUID] db is null');
        callback(true);
        return;
    };

    var tokenSign = getUuid();

    /* 查询数据库 */
    _db.collection(uidTable).findOne({
        '_id': guid
    }, function(error, result) {
        if (error) {
            logger.error(error);
            callback(true);
        } else {
            if (result) {
                /* 验证成功, 刷新tokenSign */
                _db.collection(uidTable).update({
                    '_id': guid
                }, {
                    $set: {
                        'tokenSign': tokenSign
                    }
                }, function(error) {
                    if (error) {
                        logger.error(error);
                        callback(true);
                    } else {
                        result.tokenSign = tokenSign;
                        callback(false, result);
                    }
                });
            } else {
                /* 不存在则生成唯一编号 */
                createUID(function(error, uid) {
                    var accountInfo = {
                        '_id': guid,
                        'activate': 0,
                        'uid': uid,
                        'tokenSign': tokenSign
                    };
                    /* 插入数据库数据 */
                    _db.collection(uidTable).insert(accountInfo, function(error) {
                        if (error) {
                            logger.error(error);
                            callback(true);
                        } else {
                            callback(false, accountInfo);
                        }
                    });
                });
            }
        }
    });
};

/** 
 * 生成本地唯一编号
 *
 * @param  {String} table 数据库表明
 * @param  {Function} callback 回调函数
 * @return {void}
 */
function createUID(callback) {
    if (!_db) {
        logger.error('[createUID] db is null');
        callback(true);
        return;
    };
    _db.command({
        findAndModify: uidTable,
        query: {
            '_id': "globle"
        },
        new: true,
        upsert: true,
        update: {
            $inc: {
                sign: 1
            }
        }
    }, function(err, data) {
        if (err) {
            logger.error(err);
            callback(err);
            return;
        }
        if (!data.value) {
            callback(true, 'value is null');
            return;
        };
        callback(false, 10000 + data.value.sign);
    });
};

/** 
 * 检测本地唯一编号
 *
 * @param  {Number} uid 全局唯一编号
 * @param  {String} table 数据库表明
 * @param  {Function} callback 回调函数
 * @return {void}
 */
function checkUID(uid, token, callback) {
    if (!_db) {
        logger.error('[checkUID] db is null');
        callback(true);
        return;
    };

    /* 查询数据库 */
    _db.collection(uidTable).findOne({
        'uid': uid
    }, function(error, result) {
        if (error) {
            logger.error(error);
            callback(true);
        } else {
            callback(false);
        }
    });
};

/** 
 * 创建数据
 *
 * @param  {Number} uid 全局唯一编号
 * @param  {Object} objData 插入数据
 * @param  {String} table 数据库表明
 * @param  {Function} callback 回调函数
 * @return {void}
 */
function create(uid, objData, table, callback) {

    if (!_db) {
        logger.error('[create] db is null');
        callback(true);
        return;
    };
    if (!objData['_id']) {
        objData['_id'] = uid;
    };

    /* 插入数据库数据 */
    _db.collection(table).insert(objData, function(error) {
        if (error) {
            logger.error(error);
            callback(true);
        } else {
            callback(false);
        }
    });
};

/** 
 * 更新数据
 *
 * @param  {Number} uid 全局唯一编号
 * @param  {Object} objData 插入数据
 * @param  {String} table 数据库表明
 * @param  {Function} callback 回调函数
 * @return {void}
 */
function update(uid, objData, table, callback) {
    if (!_db) {
        logger.error('[update] db is null');
        callback(true);
        return;
    };

    /* 插入数据库数据 */
    _db.collection(table).update({
        '_id': uid
    }, {
        $set: objData
    }, {
        upsert: true
    }, function(error) {
        if (error) {
            logger.error(error);
            callback(true);
        } else {
            callback(false);
        }
    });
};

/** 
 * 更新数据
 *
 * @param  {Number} uid 全局唯一编号
 * @param  {Object} objData 删除数据
 * @param  {String} table 数据库表明
 * @param  {Function} callback 回调函数
 * @return {void}
 */
function remove(uid, objData, table, callback) {
    if (!_db) {
        logger.error('[remove] db is null');
        callback(true);
        return;
    };

    /* 插入数据库数据 */
    _db.collection(table).update({
        '_id': uid
    }, {
        $uset: objData
    }, function(error) {
        if (error) {
            logger.error(error);
            callback(true);
        } else {
            callback(false);
        }
    });
};

/** 
 * 数组插入数据
 *
 * @param  {Number} uid 全局唯一编号
 * @param  {String} key 检索值
 * @param  {Object} objData 插入数据
 * @param  {String} table 数据库表明
 * @param  {Function} callback 回调函数
 * @return {void}
 */
function push(field, key, objData, table, callback) {
    if (!_db) {
        logger.error('[push] db is null');
        callback(true);
        return;
    };
    /* 配置查询参数 */
    var args = {};
    args[key] = delID;
    /* 插入数据库数据 */
    _db.collection(table).update({
        '_id': uid
    }, {
        $push: args
    }, function(error) {
        if (error) {
            logger.error(error);
            callback(true);
        } else {
            callback(false);
        }
    });
};

/** 
 * 数组删除数据
 *
 * @param  {Number} uid 全局唯一编号
 * @param  {String} key 检索值
 * @param  {String|Number} delID 删除时查询索引
 * @param  {String} table 数据库表明
 * @param  {Function} callback 回调函数
 * @return {void}
 */
function pull(field, key, delID, table, callback) {
    if (!_db) {
        logger.error('[pull] db is null');
        callback(true);
        return;
    };
    /* 配置查询参数 */
    var args = {};
    args[key] = delID;

    /* 插入数据库数据 */
    _db.collection(table).update({
        '_id': field
    }, {
        $pull: args
    }, function(error) {
        if (error) {
            logger.error(error);
            callback(true);
        } else {
            callback(false);
        }
    });
};

/** 
 * 读取数据表数据
 *
 * @param  {String} val 数据表标记值
 * @param  {String} table 数据库表明
 * @param  {Function} callback 回调函数
 * @return {void}
 */
function loadTable(val, table, callback) {
    var _dbTable = getDB( 'table' );
    if (!_dbTable) {
        logger.error('[loadTable] dbTable is null');
        callback(true);
        return;
    };

    /* 查询数据库 */
    _dbTable.collection(table).findOne({
        '_id': val
    }, function(error, result) {
        if (error) {
            logger.error(error);
            callback(true);
        } else {
            callback(false, result);
        }
    });
};

/** 
 * 读取数据
 *
 * @param  {Number} uid 全局唯一编号
 * @param  {String} table 数据库表明
 * @param  {Object} options 选择返回结构
 * @param  {Function} callback 回调函数
 * @return {void}
 */
function load(uid, table, options, callback) {
    if (typeof options == 'function') {
        callback = options;
        options = {};
    };
    if (!_db) {
        logger.error('[load] dbTable is null');
        callback(true);
        return;
    };

    /* 查询数据库 */
    _db.collection(table).findOne({
        '_id': uid
    }, options, function(error, result) {
        if (error) {
            logger.error(error);
            callback(true);
        } else {
            callback(false, result);
        }
    });
};

/** 
 * 读取全部数据
 *
 * @param  {String} table 数据库表明
 * @param  {Object} options 查询条件
 * @param  {Function} callback 回调函数
 * @return {void}
 */
function loadAll(table, options, callback) {
    if (typeof options == 'function') {
        callback = options;
        options = {};
    };
    if (!_db) {
        logger.error('[loadAll] dbTable is null');
        callback(true);
        return;
    };

    /* 查询数据库 */
    _db.collection(table).find(options).toArray(function(error, result) {
        if (error) {
            logger.error(error);
            callback(true);
        } else {
            callback(false, result);
        }
    });
};

/** 
 * 保存数据
 *
 * @param  {Number} uid 全局唯一编号
 * @param  {Object} objData 保存数据
 * @param  {String} table 数据库表明
 * @param  {Function} callback 回调函数
 * @return {void}
 */
function save(uid, objData, table, callback) {
    if (!_db) {
        logger.error('[save] db is null');
        callback(true);
        return;
    };

    if (!objData['_id']) {
        objData['_id'] = uid;
    };

    /* 插入数据库数据 */
    _db.collection(table).update({
        '_id': uid
    }, objData, {
        upsert: true
    }, function(error) {
        if (error) {
            logger.error(error);
            callback(true);
        } else {
            callback(false);
        }
    });
};



/*
 * 导出函数列表
 */
module.exports = {
    // 配置mongodb
    'configure': configure,
    // 创建uuid
    'uuid': getUuid,
    // 获取db对象
    'db': getDB,
    // 检测数据是否存在
    'checkTableValue': checkTableValue,
    // 获取本地唯一编码
    'getUID': getUID,
    // 创建数据
    'create': create,
    // 检测本地唯一编码
    'checkUID': checkUID,
    // 更新数据
    'update': update,
    // 删除数据
    'remove': remove,
    // 数组插入数据
    'push': push,
    // 数组删除数据
    'pull': pull,
    // 读取数据表数据
    'loadTable': loadTable,
    // 读取数据
    'load': load,
    // 读取全部数据
    'loadAll': loadAll,
    // 保存数据
    'save': save
};
