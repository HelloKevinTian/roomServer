'use strict';

var logger = require('ss-logger').getLogger(__filename);
var fs = require('fs');
var util = require('util');

// 框架层默认配置路径
var config = {
	'server': 'cfg/server.json', // 服务器配置
	'handle': 'cfg/handle.json', // 消息处理注册
	'cluster': false // 开启集群代理
};

// 扩展层配置回调映射 { name : callback }
var cfgExtend = {};
var appExtend = {};

// 网络模块对象
var serverAry = {};

/**
 * 配置各个功能模块
 * @param {String} name 功能模块名字
 * @param {String|Function} opts 配置文件路径 或 配置回调函数
 */
function configure(type, name, opts) {
	if (arguments.length == 2) {
		opts = name;
		name = type;
		type = 'config'
	};
	// 框架配置
	if (typeof config[name] != 'undefined') {
		config[name] = opts;
		return;
	}
	// 扩展配置
	if (type == 'config') {
		if (typeof opts === 'function') {
			cfgExtend[name] = opts;
		}
	} else {
		if (typeof opts === 'function') {
			if (!appExtend[type]) {
				appExtend[type] = {};
			};
			appExtend[type][name] = opts;
		}
	}
};

/**
 * 开启服务器
 */
function start() {

	// 开启cpu数量的进程
	var cluster = require('cluster');
	var numCPUs = require('os').cpus().length;
	if (config.cluster && cluster.isMaster) {
		// Fork workers.
		for (var i = 0; i < numCPUs; i++) {
			cluster.fork();
		}

		cluster.on('exit', function(worker, code, signal) {
			console.log('worker ' + worker.process.pid + ' died');
		});
	} else {

		if (typeof config.server === 'string') {
			config.server = JSON.parse(fs.readFileSync(config.server, "utf8"));
		}
		if (typeof config.handle === 'string') {
			config.handle = JSON.parse(fs.readFileSync(config.handle, "utf8"));
		}
		// 配置扩展接口
		for (var i in cfgExtend) {
			cfgExtend[i].call(null, module.exports);
		}
		// 创建网络连接
		for (var i in config.server) {
			var name = config.server[i].name;
			var type = config.server[i].type;
			var Connector;
			if (type = 'tcp') {
				Connector = require('./lib/tcp.js');
			} else {
				logger.error('创建服务器失败 type [%s]', type);
				return;
			}
			// 初始化网络模块
			var server = new Connector();
			server.configure('handle', config.handle[name]);
			server.configure('server', config.server[i]);
			server.start();
			// 配置扩展接口
			var extend = appExtend[name] || {};
			for (var i in extend) {
				extend[i].call(null, server);
			}
			server.show();
			serverAry[name] = server;
		}
	}
};

/**
 * 获取服务器实例
 */
function server(name) {
	return serverAry[name];
};

/**
 * 关闭服务器
 */
function stop() {
	log.debug('stop');
};

module.exports = {
	'configure': configure,
	'start': start,
	'stop': stop,
	'server': server
};


process.on('uncaughtException', function(err) {

	if (logger) {
		logger.error('未知异常: %s', err.stack);
	} else {
		console.error('未知异常: ' + err.stack);
	}
	var d = new Date();
	var time = util.format('%d-%d-%d-%d-%d-%d', d.getFullYear(), d.getMonth() + 1, d.getDate(), d.getHours(), d.getMinutes(), d.getSeconds());
	var str = util.format('%s 未知异常: %s\n', time, err.stack);
	if (!fs.existsSync('./logs')) { //不存在就创建一个
		fs.mkdirSync('./logs', '0755')
	}
	fs.appendFile("logs/uncaughtException.log", str);
});